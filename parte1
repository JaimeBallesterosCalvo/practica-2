#!/usr/bin/env python
# -*- coding: utf-8 -*-
import constraint

def leer_fichero_entrada(nombre_fichero):
        with open(nombre_fichero, 'r') as archivo:
            # Lee todas las líneas del archivo
            lineas = archivo.readlines()
            # Procesa las primeras dos líneas para obtener filas y columnas
            dimensiones = tuple(map(int, lineas[0].strip().split('x')))
            filas = dimensiones[0]
            columnas=dimensiones[1]
            #print("Numero de filas:",  filas)
            #print("Numero de columnas:", columnas)

            # Procesa la siguiente línea para obtener las plazas eléctricas
            tuplas_pe_str = lineas[1].strip().split('(')
            tuplas_pe = [tupla.replace(')', '') for tupla in tuplas_pe_str[1:]]
            plazas_electricas = [tuple(map(int, coordenadas.split(','))) for coordenadas in tuplas_pe]
            #print("las plazas que poseen una conexión a la red electrica son: ", plazas_electricas)

            vehiculos = [line.strip().split('-', 1) for line in lineas[2:]]
            """for vehiculo in vehiculos:
                print("Vehiculo:", vehiculo)"""

        return filas, columnas, plazas_electricas, vehiculos


def crear_parking(filas, columnas):
    plazas=[]
    for m in range(1, filas+1):
        fila_actual=[]
        for n in range(1, columnas+1):
            plaza= f"{m}.{n}" #no se si se puede hacer asi o mejor ponerlo como un str   plaza= (m, n)
            fila_actual.append(plaza)
        plazas.append(tuple(fila_actual))
    return tuple(plazas)

def asignacion_plazas(plazas, total_vehiculos):
    contador_plazas_asignadas = 0
    for m in plazas:
        for n in m: 
            if n=='vacia':
                contador_plazas_asignadas+=1
    if total_vehiculos==contador_plazas_asignadas:
        return True
    return False

def vehiculos_tsu_misma_fila(lista_plazas_a_comprobar):
    for i in range(len(lista_plazas_a_comprobar)) :
        if lista_plazas_a_comprobar[i] == 'TSU-C' or lista_plazas_a_comprobar[i] == 'TSU-X': #creo q seria [0] que es la actual
            for j in range(i+1, len(lista_plazas_a_comprobar)):
                if i != j and (lista_plazas_a_comprobar[j] !='TSU-C'or lista_plazas_a_comprobar[j] == 'TSU-X'):
                    return False
    return True


def capacidad_maniobra_plazas_extremo(b):
    if b != 'vacia':
        return False
    return True

def capacidad_maniobra_resto_plazas(b,c):
    if b != 'vacia'or c != 'vacia':
        return False
    return True

if __name__ == '__main__':
    problem = constraint.Problem()

    valores_entrada=leer_fichero_entrada("parking01.txt")
    filas = valores_entrada[0]
    columnas=valores_entrada[1]
    plazas_electricas=tuple(valores_entrada[2])
    vehiculos = valores_entrada[3]
    total_vehiculos=len(vehiculos) #para la restriccion uno
    plazas=crear_parking(filas,columnas)
    print(plazas)
    #Añadir y asignar a las variables su dominio, haciendo que las plazas que no tengan red electrica solo puedan ser ocupadas por vehiculos sin nevera o vacias
    for fila in plazas:
        for plaza in fila:
            if plaza not in plazas_electricas:
                problem.addVariable(plaza, ('vacia','TSU-X', 'TNU-X'))
            else:
                problem.addVariable(plaza, ('vacia','TSU-X', 'TNU-X', 'TSU-C', 'TNU-C'))
   

    # constraints

    #R1: comparamos el numero de vehiculos con el numero de plazas asignadas para comprobar que cada vehiculo ocupa una sola plaza
    problem.addConstraint(asignacion_plazas, (plazas, total_vehiculos))
    for fila in range(len(plazas)):
        for columna in range(len(plazas[fila])):
            plaza_actual=plazas[fila][columna]
            print("estoy en:", plaza_actual)
            plazas_posteriores = plazas[fila][columna + 1:]  # Obtener todas las plazas posteriores en la misma fila
            print("las siguientes plazas que tengo dlante son", plazas_posteriores)
            lista_plazas_comprobar = [plaza_actual]+list(plazas_posteriores)
            problem.addConstraint(vehiculos_tsu_misma_fila, (tuple(lista_plazas_comprobar),)) #para pasarle el resto de casillas de la fila
            
            #aplicar la restriccion 5, la plaza de la izquierda o derecha debe estar vacia
            if plaza_actual != 'vacia': 
                if fila == 0:    
                    plaza_abajo = plazas[fila+1][columna]
                    print("estoy en ", plaza_actual, "y comparo con", plaza_abajo)
                    problem.addConstraint(capacidad_maniobra_plazas_extremo, (plaza_abajo,))
                elif fila == 4:
                    plaza_arriba = plazas[fila-1][columna]
                    print("estoy en ", plaza_actual, "y comparo con", plaza_arriba)
                    problem.addConstraint(capacidad_maniobra_plazas_extremo, (plaza_arriba,))
                else:
                    plaza_abajo = plazas[fila+1][columna]
                    plaza_arriba = plazas[fila-1][columna]
                    print("estoy en ", plaza_actual, "y comparo con", plaza_arriba, "y", plaza_abajo)
                    problem.addConstraint(capacidad_maniobra_resto_plazas, (plaza_abajo, plaza_arriba))
        

solution = problem.getSolution()
if solution:
    print(solution)
else:
    print("No hay solución.")
    
